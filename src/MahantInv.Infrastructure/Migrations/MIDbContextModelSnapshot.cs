// <auto-generated />
using System;
using MahantInv.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MahantInv.Infrastructure.Migrations
{
    [DbContext(typeof(MIDbContext))]
    partial class MIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contact")
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Discount")
                        .HasColumnType("REAL");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("REAL");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<double?>("NetAmount")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("PricePerItem")
                        .HasColumnType("REAL");

                    b.Property<int?>("ProductId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Quantity")
                        .IsRequired()
                        .HasColumnType("REAL");

                    b.Property<string>("RefNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SellerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusId")
                        .HasColumnType("VARCHAR (50)");

                    b.Property<double?>("Tax")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.OrderDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDocuments");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.OrderStatusType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR (50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR (128)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatusTypes");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.OrderTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("OrderTransactions");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryContact")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.PartyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PartyCategories");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.PaymentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisposable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderBulkName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderBulkQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PicturePath")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReorderLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitTypeCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UnitTypeCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductExpiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductExpiries");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("RefNo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventory");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductInventoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("RefNo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventoryHistory");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StorageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageId");

                    b.ToTable("ProductStorages");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Buyer")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("RefNo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UsageDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUsages");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.UnitType", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Identity.MIIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Order", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", "LastModifiedBy")
                        .WithMany("Orders")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("MahantInv.Infrastructure.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("MahantInv.Infrastructure.Entities.Party", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerId");

                    b.HasOne("MahantInv.Infrastructure.Entities.OrderStatusType", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Product");

                    b.Navigation("Seller");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.OrderDocument", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Entities.Order", "Order")
                        .WithMany("OrderDocuments")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.OrderTransaction", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Entities.Order", "Order")
                        .WithMany("OrderTransactions")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("MahantInv.Infrastructure.Entities.Party", "Party")
                        .WithMany("OrderTransactions")
                        .HasForeignKey("PartyId")
                        .IsRequired();

                    b.HasOne("MahantInv.Infrastructure.Entities.PaymentType", "PaymentType")
                        .WithMany("OrderTransactions")
                        .HasForeignKey("PaymentTypeId");

                    b.Navigation("Order");

                    b.Navigation("Party");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Party", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Entities.PartyCategory", "Category")
                        .WithMany("Parties")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", "LastModifiedBy")
                        .WithMany("Parties")
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("Category");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Product", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", "LastModifiedBy")
                        .WithMany("Products")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("MahantInv.Infrastructure.Entities.UnitType", "UnitTypeCodeNavigation")
                        .WithMany("Products")
                        .HasForeignKey("UnitTypeCode");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("UnitTypeCodeNavigation");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductExpiry", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Entities.Order", "Order")
                        .WithMany("ProductExpiries")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("MahantInv.Infrastructure.Entities.Product", "Product")
                        .WithMany("ProductExpiries")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductInventory", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", "LastModifiedBy")
                        .WithMany("ProductInventories")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("MahantInv.Infrastructure.Entities.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductInventoryHistory", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", "LastModifiedBy")
                        .WithMany("ProductInventoryHistories")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("MahantInv.Infrastructure.Entities.Product", "Product")
                        .WithMany("ProductInventoryHistories")
                        .HasForeignKey("ProductId");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductStorage", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Entities.Product", "Product")
                        .WithMany("ProductStorages")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("MahantInv.Infrastructure.Entities.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.ProductUsage", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", "LastModifiedBy")
                        .WithMany("ProductUsages")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("MahantInv.Infrastructure.Entities.Product", "Product")
                        .WithMany("ProductUsages")
                        .HasForeignKey("ProductId");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MahantInv.Infrastructure.Identity.MIIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Order", b =>
                {
                    b.Navigation("OrderDocuments");

                    b.Navigation("OrderTransactions");

                    b.Navigation("ProductExpiries");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.OrderStatusType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Party", b =>
                {
                    b.Navigation("OrderTransactions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.PartyCategory", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.PaymentType", b =>
                {
                    b.Navigation("OrderTransactions");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.Product", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductExpiries");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductInventoryHistories");

                    b.Navigation("ProductStorages");

                    b.Navigation("ProductUsages");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Entities.UnitType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MahantInv.Infrastructure.Identity.MIIdentityUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Parties");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductInventoryHistories");

                    b.Navigation("ProductUsages");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
